global
  maxconn {{or (key "service/haproxy/maxconn") 4000}}
  debug
  
  ssl-default-bind-options no-sslv3
  ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
  ssl-default-server-options no-sslv3
  ssl-default-server-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS

defaults
  log global
  option httplog
  option dontlognull
  mode http
  timeout connect {{or (key "service/haproxy/timeouts/connect") "10s"}}
  timeout client {{or (key "service/haproxy/timeouts/client") "1m"}}
  timeout server {{or (key "service/haproxy/timeouts/server") "1m"}}

{{ range $service := services }}
{{ with $auth := printf "service/%s/userlist/auth" $service.Name | key }}{{ if eq $auth "true" }}{{/*
*/}}userlist users_for_{{ $service.Name }}
{{ range printf "service/%s/userlist/groups" $service.Name | ls }}  group {{.Key}} {{.Value}}{{ end }}
{{ range printf "service/%s/userlist/users" $service.Name | ls }}  user {{.Key}} insecure-password {{.Value}}{{ end }}
{{ end }}{{ end }}{{ end }}


frontend www
  bind *:80{{ if eq (env "HAPROXY_SSL") "true" }}
  bind *:443 ssl crt /etc/ssl/{{ or (env "HAPROXY_DOMAIN") "haproxy.service.consul" }}.pem
  redirect scheme https if !{ ssl_fc }{{ end }}

  acl host_stats hdr(host) -i stats.{{ or (env "HAPROXY_DOMAIN") "haproxy.service.consul" }}
  use_backend stats_backend if host_stats

  # Generated automatically by consul-template{{ range services }}
  acl host_{{ .Name }} hdr(host) -i {{ .Name }}.{{ or (env "HAPROXY_DOMAIN") "haproxy.service.consul" }} 
  use_backend {{ .Name }}_backend if host_{{ .Name }}{{ end }}

{{ range $service := services }}
backend {{ .Name }}_backend{{ range service .Name }}
   mode http
   option http-server-close
   option forwardfor
   http-request set-header X-Forwarded-Port %[dst_port]
   http-request add-header X-Forwarded-Proto https if { ssl_fc }
   server {{ .Node }} {{ .Address }}:{{ .Port }}{{ end }}
{{ with $auth := printf "service/%s/userlist/auth" $service.Name | key }}{{ if eq $auth "true" }}
   acl AuthOkay_{{ $service.Name }} http_auth(users_for_{{ $service.Name }})
   http-request auth realm MyAuthRealm if !AuthOkay_{{ $service.Name }}
{{ end }}{{ end }}{{ end }}

backend stats_backend
  stats enable
  stats uri /
  stats hide-version
  stats auth {{or (key "service/haproxy/stats/username") "admin"}}:{{or (key "service/haproxy/stats/password") "admin"}}
  stats admin if TRUE
